<?xml version="1.0" encoding="UTF-8" ?>

<config>
	<luceneMatchVersion>4.10.2</luceneMatchVersion>
	<lib dir="${solr.install.dir:../../../..}/contrib/dataimporthandler/lib" regex=".*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/extraction/lib" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-cell-\d.*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/contrib/analysis-extras/lib" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/contrib/analysis-extras/lucene-libs" regex=".*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/clustering/lib/" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-clustering-\d.*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/langid/lib/" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-langid-\d.*\.jar" />

	<lib dir="${solr.install.dir:../../../..}/contrib/velocity/lib" regex=".*\.jar" />
	<lib dir="${solr.install.dir:../../../..}/dist/" regex="solr-velocity-\d.*\.jar" />

	<lib dir="${solr.install.dir:../../..}/dist/" regex=".*\.jar" />

	<dataDir>${solr.data.dir:}</dataDir>

	<directoryFactory name="DirectoryFactory" class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}">

		<str name="solr.hdfs.home">${solr.hdfs.home:}</str>
		<str name="solr.hdfs.confdir">${solr.hdfs.confdir:}</str>
		<str name="solr.hdfs.blockcache.enabled">${solr.hdfs.blockcache.enabled:true}</str>
			created. -->
		<str name="solr.hdfs.blockcache.global">${solr.hdfs.blockcache.global:true}</str>

	</directoryFactory>

	<codecFactory class="solr.SchemaCodecFactory" />

	<schemaFactory class="ClassicIndexSchemaFactory" />

	<indexConfig>
		
		<lockType>${solr.lock.type:native}</lockType>
		<infoStream>true</infoStream>

		<checkIntegrityAtMerge>false</checkIntegrityAtMerge>
	</indexConfig>

	<jmx />
	
	<updateHandler class="solr.DirectUpdateHandler2">

		<updateLog>
			<str name="dir">${solr.ulog.dir:}</str>
		</updateLog>

		<autoCommit>
			<maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
			<openSearcher>false</openSearcher>
		</autoCommit>

		<autoSoftCommit>
			<maxTime>${solr.autoSoftCommit.maxTime:3000}</maxTime>
		</autoSoftCommit>

	</updateHandler>

	<query>
		<maxBooleanClauses>1024</maxBooleanClauses>
		<filterCache class="solr.FastLRUCache" size="512" initialSize="512" autowarmCount="0" />
		<queryResultCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0" />
		<documentCache class="solr.LRUCache" size="512" initialSize="512" autowarmCount="0" />

		<!-- custom cache currently used by block join -->
		<cache name="perSegFilter" class="solr.search.LRUCache" size="10" initialSize="0" autowarmCount="10"
			regenerator="solr.NoOpRegenerator" />
		<enableLazyFieldLoading>true</enableLazyFieldLoading>

		<queryResultWindowSize>20</queryResultWindowSize>

		<queryResultMaxDocsCached>200</queryResultMaxDocsCached>

		<listener event="newSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
			</arr>
		</listener>
		<listener event="firstSearcher" class="solr.QuerySenderListener">
			<arr name="queries">
				<lst>
					<str name="q">static firstSearcher warming in solrconfig.xml</str>
				</lst>
			</arr>
		</listener>
		<useColdSearcher>false</useColdSearcher>
		<maxWarmingSearchers>4</maxWarmingSearchers>

	</query>

	<requestDispatcher handleSelect="false">
		
		<requestParsers enableRemoteStreaming="true" multipartUploadLimitInKB="2048000"
			formdataUploadLimitInKB="2048" addHttpRequestToContext="false" />

		<httpCaching never304="true" />
	</requestDispatcher>

	<requestHandler name="/dataimport" class="solr.DataImportHandler">
		<lst name="defaults">
			<str name="config">db-data-config.xml</str>
		</lst>
	</requestHandler>

	<requestHandler name="/select" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<int name="rows">10</int>
			<str name="df">name</str>
		</lst>
	</requestHandler>

	<!-- A request handler that returns indented JSON by default -->
	<requestHandler name="/query" class="solr.SearchHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
			<str name="df">name</str>
		</lst>
	</requestHandler>


	<requestHandler name="/get" class="solr.RealTimeGetHandler">
		<lst name="defaults">
			<str name="omitHeader">true</str>
			<str name="wt">json</str>
			<str name="indent">true</str>
		</lst>
	</requestHandler>

	<requestHandler name="/update" class="solr.UpdateRequestHandler">
	</requestHandler>
	<requestHandler name="/update/extract" startup="lazy" class="solr.extraction.ExtractingRequestHandler">
		<lst name="defaults">
			<str name="lowernames">true</str>
			<str name="uprefix">ignored_</str>

			<!-- capture link hrefs but ignore div attributes -->
			<str name="captureAttr">true</str>
			<str name="fmap.a">links</str>
			<str name="fmap.div">ignored_</str>
		</lst>
	</requestHandler>

	<requestHandler name="/analysis/field" startup="lazy" class="solr.FieldAnalysisRequestHandler" />

	<requestHandler name="/analysis/document" class="solr.DocumentAnalysisRequestHandler" startup="lazy" />


	<requestHandler name="/admin/" class="solr.admin.AdminHandlers" />

	<requestHandler name="/admin/ping" class="solr.PingRequestHandler">
		<lst name="invariants">
			<str name="q">*:*</str>			
		</lst>
		<lst name="defaults">
			<str name="qt">standard</str>
			<str name="df">product_item_name</str>
			<str name="echoParams">all</str>
		</lst>
		<str name="healthcheckFile">server-enabled.txt</str>
	</requestHandler>

	<requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="echoHandler">true</str>
		</lst>
	</requestHandler>

	<requestHandler name="/replication" class="solr.ReplicationHandler">
	</requestHandler>
	<searchComponent name="spellcheck" class="solr.SpellCheckComponent">

		<str name="queryAnalyzerFieldType">text_general</str>

		<!-- Multiple "Spell Checkers" can be declared and used by this component -->

		<!-- a spellchecker built from a field of the main index -->
		<lst name="spellchecker">
			<str name="name">default</str>
			<str name="field">text</str>
			<str name="classname">solr.DirectSolrSpellChecker</str>
			<!-- the spellcheck distance measure used, the default is the internal levenshtein -->
			<str name="distanceMeasure">internal</str>
			<!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
			<float name="accuracy">0.5</float>
			<!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
			<int name="maxEdits">2</int>
			<!-- the minimum shared prefix when enumerating terms -->
			<int name="minPrefix">1</int>
			<!-- maximum number of inspections per result. -->
			<int name="maxInspections">5</int>
			<!-- minimum length of a query term to be considered for correction -->
			<int name="minQueryLength">4</int>
			<!-- maximum threshold of documents a query term can appear to be considered for correction -->
			<float name="maxQueryFrequency">0.01</float>
			<!-- uncomment this to require suggestions to occur in 1% of the documents <float name="thresholdTokenFrequency">.01</float> -->
		</lst>

		<!-- a spellchecker that can break or combine words. See "/spell" handler below for usage -->
		<lst name="spellchecker">
			<str name="name">wordbreak</str>
			<str name="classname">solr.WordBreakSolrSpellChecker</str>
			<str name="field">name</str>
			<str name="combineWords">true</str>
			<str name="breakWords">true</str>
			<int name="maxChanges">10</int>
		</lst>
	</searchComponent>

	<requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="df">text</str>
			<!-- Solr will use suggestions from both the 'default' spellchecker and from the 'wordbreak' spellchecker and combine 
				them. collations (re-written queries) can include a combination of corrections from both spellcheckers -->
			<str name="spellcheck.dictionary">default</str>
			<str name="spellcheck.dictionary">wordbreak</str>
			<str name="spellcheck">on</str>
			<str name="spellcheck.extendedResults">true</str>
			<str name="spellcheck.count">10</str>
			<str name="spellcheck.alternativeTermCount">5</str>
			<str name="spellcheck.maxResultsForSuggest">5</str>
			<str name="spellcheck.collate">true</str>
			<str name="spellcheck.collateExtendedResults">true</str>
			<str name="spellcheck.maxCollationTries">10</str>
			<str name="spellcheck.maxCollations">5</str>
		</lst>
		<arr name="last-components">
			<str>spellcheck</str>
		</arr>
	</requestHandler>
	
	<searchComponent name="tvComponent" class="solr.TermVectorComponent" />

	<!-- A request handler for demonstrating the term vector component This is purely as an example. In reality you will likely 
		want to add the component to your already specified request handlers. -->
	<requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="df">text</str>
			<bool name="tv">true</bool>
		</lst>
		<arr name="last-components">
			<str>tvComponent</str>
		</arr>
	</requestHandler>

	<!-- Clustering Component You'll need to set the solr.clustering.enabled system property when running solr to run with clustering 
		enabled: java -Dsolr.clustering.enabled=true -jar start.jar http://wiki.apache.org/solr/ClusteringComponent http://carrot2.github.io/solr-integration-strategies/ -->
	<searchComponent name="clustering" enable="${solr.clustering.enabled:false}" class="solr.clustering.ClusteringComponent">
		<lst name="engine">
			<str name="name">lingo</str>

			<!-- Class name of a clustering algorithm compatible with the Carrot2 framework. Currently available open source algorithms 
				are: * org.carrot2.clustering.lingo.LingoClusteringAlgorithm * org.carrot2.clustering.stc.STCClusteringAlgorithm * org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm 
				See http://project.carrot2.org/algorithms.html for more information. A commercial algorithm Lingo3G (needs to be installed 
				separately) is defined as: * com.carrotsearch.lingo3g.Lingo3GClusteringAlgorithm -->
			<str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm
			</str>

			<!-- Override location of the clustering algorithm's resources (attribute definitions and lexical resources). A directory 
				from which to load algorithm-specific stop words, stop labels and attribute definition XMLs. For an overview of Carrot2 lexical 
				resources, see: http://download.carrot2.org/head/manual/#chapter.lexical-resources For an overview of Lingo3G lexical resources, 
				see: http://download.carrotsearch.com/lingo3g/manual/#chapter.lexical-resources -->
			<str name="carrot.resourcesDir">clustering/carrot2</str>
		</lst>

		<!-- An example definition for the STC clustering algorithm. -->
		<lst name="engine">
			<str name="name">stc</str>
			<str name="carrot.algorithm">org.carrot2.clustering.stc.STCClusteringAlgorithm</str>
		</lst>

		<!-- An example definition for the bisecting kmeans clustering algorithm. -->
		<lst name="engine">
			<str name="name">kmeans</str>
			<str name="carrot.algorithm">org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm
			</str>
		</lst>
	</searchComponent>

	<!-- A request handler for demonstrating the clustering component This is purely as an example. In reality you will likely 
		want to add the component to your already specified request handlers. -->
	<requestHandler name="/clustering" startup="lazy" enable="${solr.clustering.enabled:false}" class="solr.SearchHandler">
		<lst name="defaults">
			<bool name="clustering">true</bool>
			<bool name="clustering.results">true</bool>
			<!-- Field name with the logical "title" of a each document (optional) -->
			<str name="carrot.title">name</str>
			<!-- Field name with the logical "URL" of a each document (optional) -->
			<str name="carrot.url">id</str>
			<!-- Field name with the logical "content" of a each document (optional) -->
			<str name="carrot.snippet">features</str>
			<!-- Apply highlighter to the title/ content and use this for clustering. -->
			<bool name="carrot.produceSummary">true</bool>
			<!-- the maximum number of labels per cluster -->
			<!--<int name="carrot.numDescriptions">5</int> -->
			<!-- produce sub clusters -->
			<bool name="carrot.outputSubClusters">false</bool>

			<!-- Configure the remaining request handler parameters. -->
			<str name="defType">edismax</str>
			<str name="qf">
				text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
			</str>
			<str name="q.alt">*:*</str>
			<str name="rows">10</str>
			<str name="fl">*,score</str>
		</lst>
		<arr name="last-components">
			<str>clustering</str>
		</arr>
	</requestHandler>

	<!-- Terms Component http://wiki.apache.org/solr/TermsComponent A component to return terms and document frequency of those 
		terms -->
	<searchComponent name="terms" class="solr.TermsComponent" />

	<!-- A request handler for demonstrating the terms component -->
	<requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<bool name="terms">true</bool>
			<bool name="distrib">false</bool>
		</lst>
		<arr name="components">
			<str>terms</str>
		</arr>
	</requestHandler>

	<!-- A request handler for demonstrating the elevator component -->
	<requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
		<lst name="defaults">
			<str name="echoParams">explicit</str>
			<str name="df">text</str>
		</lst>
		<arr name="last-components">
			<str>elevator</str>
		</arr>
	</requestHandler>

	<!-- Highlighting Component http://wiki.apache.org/solr/HighlightingParameters -->
	<searchComponent class="solr.HighlightComponent" name="highlight">
		<highlighting>
			<!-- Configure the standard fragmenter -->
			<!-- This could most likely be commented out in the "default" case -->
			<fragmenter name="gap" default="true" class="solr.highlight.GapFragmenter">
				<lst name="defaults">
					<int name="hl.fragsize">100</int>
				</lst>
			</fragmenter>

			<!-- A regular-expression-based fragmenter (for sentence extraction) -->
			<fragmenter name="regex" class="solr.highlight.RegexFragmenter">
				<lst name="defaults">
					<!-- slightly smaller fragsizes work better because of slop -->
					<int name="hl.fragsize">70</int>
					<!-- allow 50% slop on fragment sizes -->
					<float name="hl.regex.slop">0.5</float>
					<!-- a basic sentence pattern -->
					<str name="hl.regex.pattern">[-\w ,/\n\&quot;&apos;]{20,200}</str>
				</lst>
			</fragmenter>

			<!-- Configure the standard formatter -->
			<formatter name="html" default="true" class="solr.highlight.HtmlFormatter">
				<lst name="defaults">
					<str name="hl.simple.pre"><![CDATA[<em>]]></str>
					<str name="hl.simple.post"><![CDATA[</em>]]></str>
				</lst>
			</formatter>

			<!-- Configure the standard encoder -->
			<encoder name="html" class="solr.highlight.HtmlEncoder" />

			<!-- Configure the standard fragListBuilder -->
			<fragListBuilder name="simple" class="solr.highlight.SimpleFragListBuilder" />

			<!-- Configure the single fragListBuilder -->
			<fragListBuilder name="single" class="solr.highlight.SingleFragListBuilder" />

			<!-- Configure the weighted fragListBuilder -->
			<fragListBuilder name="weighted" default="true" class="solr.highlight.WeightedFragListBuilder" />

			<!-- default tag FragmentsBuilder -->
			<fragmentsBuilder name="default" default="true" class="solr.highlight.ScoreOrderFragmentsBuilder">
				<!-- <lst name="defaults"> <str name="hl.multiValuedSeparatorChar">/</str> </lst> -->
			</fragmentsBuilder>

			<!-- multi-colored tag FragmentsBuilder -->
			<fragmentsBuilder name="colored" class="solr.highlight.ScoreOrderFragmentsBuilder">
				<lst name="defaults">
					<str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
					<str name="hl.tag.post"><![CDATA[</b>]]></str>
				</lst>
			</fragmentsBuilder>

			<boundaryScanner name="default" default="true" class="solr.highlight.SimpleBoundaryScanner">
				<lst name="defaults">
					<str name="hl.bs.maxScan">10</str>
					<str name="hl.bs.chars">.,!? &#9;&#10;&#13;</str>
				</lst>
			</boundaryScanner>

			<boundaryScanner name="breakIterator" class="solr.highlight.BreakIteratorBoundaryScanner">
				<lst name="defaults">
					<!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
					<str name="hl.bs.type">WORD</str>
					<!-- language and country are used when constructing Locale object. -->
					<!-- And the Locale object will be used when getting instance of BreakIterator -->
					<str name="hl.bs.language">en</str>
					<str name="hl.bs.country">US</str>
				</lst>
			</boundaryScanner>
		</highlighting>
	</searchComponent>
	<queryResponseWriter name="json" class="solr.JSONResponseWriter">
		<!-- For the purposes of the tutorial, JSON responses are written as plain text so that they are easy to read in *any* 
			browser. If you expect a MIME type of "application/json" just remove this override. -->
		<str name="content-type">text/plain; charset=UTF-8</str>
	</queryResponseWriter>

	<!-- Custom response writers can be declared as needed... -->
	<queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy" />


	<!-- XSLT response writer transforms the XML output by any xslt file found in Solr's conf/xslt directory. Changes to xslt 
		files are checked for every xsltCacheLifetimeSeconds. -->
	<queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
		<int name="xsltCacheLifetimeSeconds">5</int>
	</queryResponseWriter>
	<admin>
		<defaultQuery>*:*</defaultQuery>
	</admin>

</config>
